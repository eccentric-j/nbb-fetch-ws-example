
import { $APP, shadow$provide, $jscomp } from "./nbb_core.js";
import  "./nbb_goog_string.js";
const shadow_esm_import = function(x) { return import(x) };
'use strict';var Kya=function(a,b,c){c=$APP.$g.h($APP.qp,c);c=$APP.Fg(c);c=$APP.Ne.h(c,D$);var d=$APP.uh,e=$APP.uh,f=$APP.x(b);$APP.z(f);$APP.B(f);for(f=b;;){b=d;d=e;f=$APP.x(f);e=$APP.z(f);f=$APP.B(f);var g=e,l=f;if($APP.n(g)){var q=$APP.Lj,w=g;if($APP.n(function(){var A=/^--$/,m=w;return q.h?q.h(A,m):q.call(null,A,m)}()))e=b,f=$APP.mi.h(d,l),b=$APP.uh,d=e,e=f,f=b;else if($APP.n(function(){var A=/^--\S+=/,m=w;return q.h?q.h(A,m):q.call(null,A,m)}()))e=$APP.$f.h(b,$APP.mi.h(new $APP.I(null,1,5,$APP.J,
[E$],null),$APP.am.j(g,/=/,2))),f=d,b=l,d=e,e=f,f=b;else if($APP.n(function(){var A=/^--/,m=w;return q.h?q.h(A,m):q.call(null,A,m)}())){e=$APP.Pe(a,g)?new $APP.I(null,2,5,$APP.J,[$APP.z(l),$APP.Fd(l)],null):new $APP.I(null,2,5,$APP.J,[null,l],null);f=$APP.D.j(e,0,null);e=$APP.D.j(e,1,null);b=$APP.$f.h(b,$APP.mi.h(new $APP.I(null,2,5,$APP.J,[E$,g],null),$APP.n(f)?new $APP.I(null,1,5,$APP.J,[f],null):$APP.uh));f=d;var u=e;d=b;e=f;f=u}else $APP.n(function(){var A=/^-./,m=w;return q.h?q.h(A,m):q.call(null,
A,m)}())?(e=function(){var A=$APP.uh,m=$APP.Fd(g),F=$APP.x(m);$APP.z(F);$APP.B(F);for(F=m;;){m=A;A=$APP.x(F);F=$APP.z(A);A=$APP.B(A);F=["-",$APP.r.g(F)].join("");if($APP.Pe(a,F))return $APP.x(A)?new $APP.I(null,2,5,$APP.J,[$APP.$f.h(m,new $APP.I(null,3,5,$APP.J,[F$,F,$APP.Np.g(A)],null)),l],null):new $APP.I(null,2,5,$APP.J,[$APP.$f.h(m,new $APP.I(null,3,5,$APP.J,[F$,F,$APP.z(l)],null)),$APP.Fd(l)],null);if($APP.x(A))m=$APP.$f.h(m,new $APP.I(null,2,5,$APP.J,[F$,F],null)),F=A,A=m;else return new $APP.I(null,
2,5,$APP.J,[$APP.$f.h(m,new $APP.I(null,2,5,$APP.J,[F$,F],null)),l],null)}}(),f=$APP.D.j(e,0,null),e=$APP.D.j(e,1,null),b=$APP.mi.h(b,f),f=d,u=e,d=b,e=f,f=u):$APP.n(c)?(e=b,f=$APP.mi.h(d,$APP.cg(g,l)),b=$APP.uh,d=e,e=f,f=b):(e=b,f=$APP.$f.h(d,g),b=l,d=e,e=f,f=b)}else return new $APP.I(null,2,5,$APP.J,[b,d],null)}},Lya=function(a){return $APP.Np.g($APP.Uj.h(function(b){return["  %",0===b?null:["-",$APP.r.g(b)].join(""),"s"].join("")},a))},Nya=function(a){if($APP.n(!0)){var b=$APP.gj($APP.$g.j($APP.Jm,
a,Mya));if($APP.x(b)){b=["Warning: The following options to parse-opts are unrecognized: ",$APP.Np.h(", ",b)].join("");var c=$APP.fb;$APP.fb=$APP.hb;try{$APP.GC.l($APP.E([b]))}finally{$APP.fb=c}}}return $APP.nj(a,Mya)},Pya=function(a){var b=$APP.Ej.h(function(q){return"string"===typeof q||null==q},a);a=$APP.$g.h($APP.qp,$APP.kh.h($APP.ce(b),a));var c=$APP.D.j(b,0,null),d=$APP.D.j(b,1,null);b=$APP.D.j(b,2,null);d=$APP.n(d)?d:E$.g(a);var e=$APP.n(d)?$APP.Fd($APP.Jj(/^(--[^ =]+)(?:[ =](.*))?/,d)):null;
d=$APP.D.j(e,0,null);e=$APP.D.j(e,1,null);var f=$APP.n(d)?$APP.Vj.g($APP.D.h($APP.Jj(/^--(\[no-\])?(.*)/,d),2)):null,g=Oya.g(a),l=$APP.x(g)?$APP.$g.j($APP.Uj,$APP.Au,$APP.Gq.D(2,2,$APP.nt.g(null),g)):null;g=$APP.D.j(l,0,null);l=$APP.D.j(l,1,null);return $APP.Im.l($APP.E([new $APP.k(null,7,[$APP.Vq,f,F$,c,E$,d,G$,e,$APP.xG,b,H$,g,I$,l],null),Nya($APP.Jm.h(a,Oya))]))},Qya=function(a,b){return $APP.Pe(a,b)?$APP.Gm.j(a,new $APP.I(null,1,5,$APP.J,[b],null),function(c){return null==c?null:$APP.we(c)?c:
new $APP.I(null,1,5,$APP.J,[c],null)}):a},Rya=function(a){return $APP.Uj.h(function(b){return Qya(Qya($APP.Ae(b)?Nya(b):Pya(b),H$),I$)},a)},J$=function(a,b){return $APP.Ye.j(function(c,d){return $APP.Pe(d,b)?$APP.mj.j(c,$APP.Vq.g(d),b.g?b.g(d):b.call(null,d)):c},$APP.Eg,a)},Sya=function(a){return $APP.Ye.j(function(b,c){return $APP.n(K$.g(c))?$APP.mj.j(b,$APP.Vq.g(c),K$.g(c)):b},$APP.Eg,a)},L$=function(a,b,c){return $APP.z($APP.rh.h(function(d){d=$APP.Ne.h(d,b);if($APP.n(d)){var e=$APP.ie($APP.Jj(/^--\[no-\](.*)/,
d));d=$APP.n(e)?$APP.rj([["--",$APP.r.g(e)].join(""),["--no-",$APP.r.g(e)].join("")]):$APP.rj([d]);return $APP.Pe(d,c)}return null},a))},M$=function(a){return $APP.qk.l($APP.E([$APP.Np.h(" ",a)]))},Tya=function(a,b){return["Missing required argument for ",M$($APP.E([a,b]))].join("")},Uya=function(a,b,c,d){var e=$APP.Fg(b);b=$APP.Ne.h(e,H$);e=$APP.Ne.h(e,I$);a:{var f=$APP.x(b);$APP.z(f);$APP.B(f);f=$APP.x(e);$APP.z(f);$APP.B(f);for(f=e;;){e=$APP.x(b);b=$APP.z(e);e=$APP.B(e);var g=$APP.x(f);f=$APP.z(g);
g=$APP.B(g);if($APP.n(b)){try{var l=b.g?b.g(a):b.call(null,a)}catch(q){l=null}if($APP.n(l))f=g,b=e;else{l=$APP.J;b=a;e=f;c=["Failed to validate ",M$($APP.E([c,d])),$APP.n(e)?[": ",$APP.r.g("string"===typeof e?e:e.g?e.g(b):e.call(null,b))].join(""):""].join("");c=new $APP.I(null,2,5,l,[N$,c],null);break a}}else{c=null;break a}}}return $APP.n(c)?c:new $APP.I(null,2,5,$APP.J,[a,null],null)},Vya=function(a,b,c){var d=$APP.Fg(a);d=$APP.Ne.h(d,G$);if($APP.n($APP.n(d)?null==c:d))return new $APP.I(null,2,
5,$APP.J,[N$,Tya(b,d)],null);$APP.n(d)?d=c:(d=E$.g(a),$APP.n(d)&&(d=$APP.Jj(/^--\[no-\]/,E$.g(a)),d=$APP.n(d)?$APP.Jj(/^--no-/,b):d),d=$APP.mb(d));var e=$APP.Fg(a);e=$APP.Ne.h(e,$APP.lx);if($APP.n(e))try{var f=new $APP.I(null,2,5,$APP.J,[e.g?e.g(d):e.call(null,d),null],null)}catch(g){f=$APP.J,d=$APP.r.g(g),d=["Error while parsing option ",M$($APP.E([b,c])),": ",$APP.r.g(d)].join(""),f=new $APP.I(null,2,5,f,[null,d],null)}else f=new $APP.I(null,2,5,$APP.J,[d,null],null);d=f;f=$APP.D.j(d,0,null);d=
$APP.D.j(d,1,null);return $APP.n(d)?new $APP.I(null,2,5,$APP.J,[N$,d],null):$APP.n(O$.g(a))?new $APP.I(null,2,5,$APP.J,[f,null],null):Uya(f,a,b,c)},Zya=function(a,b,c){c=$APP.$g.h($APP.qp,c);c=$APP.Fg(c);var d=$APP.Ne.h(c,P$),e=$APP.Ne.h(c,Q$);c=J$(a,$APP.Tn);var f=J$(a,R$),g=Sya(a);return function(l){var q=$APP.D.j(l,0,null),w=$APP.D.j(l,1,null);l=$APP.D.j(l,2,null);return $APP.n(d)?new $APP.I(null,2,5,$APP.J,[$APP.nj(q,w),l],null):new $APP.I(null,2,5,$APP.J,[q,l],null)}(function(l){return $APP.Ye.j(function(q,
w){var u=$APP.D.j(q,0,null),A=$APP.D.j(q,1,null);q=$APP.D.j(q,2,null);var m=$APP.D.j(w,0,null),F=$APP.D.j(w,1,null);if($APP.Pe($APP.uj(A),m))u=new $APP.I(null,3,5,$APP.J,[u,A,q],null);else{w=$APP.J;var M=$APP.mj.j,U=$APP.z(l);F=F.g?F.g(U):F.call(null,U);u=new $APP.I(null,3,5,w,[M.call($APP.mj,u,m,F),A,q],null)}return u},l,f)}(function(l){return $APP.Ye.j(function(q,w){var u=$APP.D.j(q,0,null),A=$APP.D.j(q,1,null);q=$APP.D.j(q,2,null);var m=$APP.D.j(w,0,null);w=$APP.D.j(w,1,null);return $APP.Pe(u,
m)?new $APP.I(null,3,5,$APP.J,[u,A,q],null):new $APP.I(null,3,5,$APP.J,[u,A,$APP.$f.h(q,w)],null)},l,g)}($APP.Ye.j(function(l,q){var w=$APP.D.j(l,0,null),u=$APP.D.j(l,1,null);l=$APP.D.j(l,2,null);var A=$APP.D.j(q,0,null),m=$APP.D.j(q,1,null),F=$APP.D.j(q,2,null),M=L$(a,A,m);if($APP.n(M)){q=Vya(M,m,F);var U=$APP.D.j(q,0,null);q=$APP.D.j(q,1,null);var W=$APP.Vq.g(M);if($APP.C.h(U,N$))return new $APP.I(null,3,5,$APP.J,[w,u,$APP.$f.h(l,q)],null);if($APP.n(function(){if($APP.n(e)){var Y=L$(a,F$,F);return $APP.n(Y)?
Y:L$(a,E$,F)}return e}()))return new $APP.I(null,3,5,$APP.J,[w,u,$APP.$f.h(l,Tya(m,G$.g(M)))],null);q=function(){var Y=Wya.g(M);if($APP.n(Y))return $APP.n(Xya.g(M))?$APP.go.D(w,W,Y,U):$APP.go.j(w,W,Y);Y=Yya.h(M,$APP.mj);return Y.j?Y.j(w,W,U):Y.call(null,w,W,U)}();return $APP.n(O$.g(M))?(A=Uya($APP.Ne.h(q,W),M,m,F),m=$APP.D.j(A,0,null),A=$APP.D.j(A,1,null),$APP.C.h(m,N$)?new $APP.I(null,3,5,$APP.J,[w,u,$APP.$f.h(l,A)],null):new $APP.I(null,3,5,$APP.J,[q,$APP.$f.h(u,W),l],null)):new $APP.I(null,3,5,
$APP.J,[q,$APP.$f.h(u,W),l],null)}return new $APP.I(null,3,5,$APP.J,[w,u,$APP.$f.h(l,["Unknown option: ",$APP.qk.l($APP.E([m]))].join(""))],null)},new $APP.I(null,3,5,$APP.J,[c,$APP.uh,$APP.uh],null),b))))},S$=function(a,b){var c=$APP.Fg(b),d=$APP.Ne.h(c,F$),e=$APP.Ne.h(c,E$),f=$APP.Ne.h(c,G$),g=$APP.Ne.h(c,$APP.xG),l=$APP.Ne.h(c,$APP.Tn),q=$APP.Ne.h(c,$APP.oD),w=$APP.Ne.h(c,R$);c=$APP.n($APP.n(d)?e:d)?[$APP.r.g(d),", ",$APP.r.g(e)].join(""):$APP.n(e)?["    ",$APP.r.g(e)].join(""):$APP.n(d)?d:null;
c=$APP.n(f)?new $APP.I(null,2,5,$APP.J,[[$APP.r.g(c)," ",$APP.r.g(f)].join(""),function(){if($APP.n(q))return q;var u=$APP.Pe(b,$APP.Tn)?null!=l?$APP.r.g(l):"nil":null;if($APP.n(u))return u;u=$APP.n(w)?"\x3ccomputed\x3e":null;return $APP.n(u)?u:""}()],null):new $APP.I(null,2,5,$APP.J,[c,""],null);f=$APP.D.j(c,0,null);c=$APP.D.j(c,1,null);return $APP.n(a)?new $APP.I(null,3,5,$APP.J,[f,c,$APP.n(g)?g:""],null):new $APP.I(null,2,5,$APP.J,[f,$APP.n(g)?g:""],null)},U$=function(a,b){var c=Lya(a);return $APP.Uj.h(function(d){return $APP.$g.j(T$,
c,d).replace(/[\s\xa0]+$/,"")},b)},$ya=function(a){return $APP.Ye.j(function(b,c){var d=$APP.Fg(c);c=$APP.Ne.h(d,G$);var e=$APP.Ne.h(d,F$);d=$APP.Ne.h(d,E$);return $APP.n(c)?$APP.mi.h(b,$APP.ot.h($APP.kb,new $APP.I(null,2,5,$APP.J,[e,d],null))):b},$APP.qj,a)},V$=function(a){if($APP.x(a)){var b=$APP.Yg(function(c){var d=G$.g(c);return $APP.n(d)?$APP.Pe(c,$APP.Tn)||$APP.Pe(c,R$):d},a);a=$APP.Uj.h($APP.Km.h(S$,b),a);b=$APP.$g.j($APP.Uj,function(){function c(e){var f=null;if(0<arguments.length){f=0;for(var g=
Array(arguments.length-0);f<g.length;)g[f]=arguments[f+0],++f;f=new $APP.Bd(g,0,null)}return d.call(this,f)}function d(e){return $APP.$g.h($APP.ho,$APP.Uj.h($APP.ce,e))}c.o=0;c.A=function(e){e=$APP.x(e);return d(e)};c.l=d;return c}(),a);a=U$(b,a);return $APP.Np.h("\n",a)}return""},W$=function(a){a=Rya(a);var b=J$(a,$APP.Tn);return $APP.Ye.j(function(c,d){var e=$APP.D.j(d,0,null);d=$APP.D.j(d,1,null);return $APP.Pe(c,e)?c:$APP.Gm.j(c,new $APP.I(null,1,5,$APP.J,[e],null),d.g?d.g(b):d.call(null,b))},
b,J$(a,R$))},aza=new $APP.v(null,"lens","lens",-984575916,null),N$=new $APP.H("clojure.tools.cli","error","clojure.tools.cli/error",1727067675),bza=new $APP.v(null,"format-lines","format-lines",-1289973557,null),cza=new $APP.v(null,"parts","parts",-1805428078,null),dza=new $APP.v(null,"parse-opts","parse-opts",78599525,null),Wya=new $APP.H(null,"update-fn","update-fn",711087313),R$=new $APP.H(null,"default-fn","default-fn",-473729550),eza=new $APP.H(null,"arguments","arguments",-1182834456),Yya=new $APP.H(null,
"assoc-fn","assoc-fn",418597603),fza=new $APP.v(null,"show-defaults?","show-defaults?",-1370106808,null),gza=new $APP.v("clojure.tools.cli","get-default-options","clojure.tools.cli/get-default-options",-489377747,null),Oya=new $APP.H(null,"validate","validate",-201300827),hza=new $APP.v("clojure.tools.cli","format-lines","clojure.tools.cli/format-lines",1692977358,null),P$=new $APP.H(null,"no-defaults","no-defaults",-1025033878),O$=new $APP.H(null,"post-validation","post-validation",-1787936392),
iza=new $APP.v("clojure.tools.cli","make-summary-part","clojure.tools.cli/make-summary-part",2063480285,null),jza=new $APP.H(null,"summary-fn","summary-fn",-2130107959),G$=new $APP.H(null,"required","required",1807647006),kza=new $APP.v(null,"make-summary-part","make-summary-part",201489880,null),lza=new $APP.H(null,"errors","errors",-908790718),H$=new $APP.H(null,"validate-fn","validate-fn",1430169944),mza=new $APP.v("clojure.tools.cli","summarize","clojure.tools.cli/summarize",1236928737,null),
D$=new $APP.H(null,"in-order","in-order",-1605651796),nza=new $APP.v(null,"get-default-options","get-default-options",-1272395736,null),X$=new $APP.v(null,"option-specs","option-specs",258957352,null),I$=new $APP.H(null,"validate-msg","validate-msg",-1415932287),Xya=new $APP.H(null,"multi","multi",-190293005),oza=new $APP.v(null,"summarize","summarize",-1678257946,null),K$=new $APP.H(null,"missing","missing",362507769),F$=new $APP.H(null,"short-opt","short-opt",-384995699),pza=new $APP.v("clojure.tools.cli",
"parse-opts","clojure.tools.cli/parse-opts",-152892056,null),Q$=new $APP.H(null,"strict","strict",-665564191),qza=new $APP.H(null,"options","options",99638489),E$=new $APP.H(null,"long-opt","long-opt",-386094553);var T$=function T$(a){for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return T$.l(arguments[0],1<c.length?new $APP.Bd(c.slice(1),0,null):null)};T$.l=function(a,b){return $APP.$g.j($APP.P6,a,b)};T$.o=1;T$.A=function(a){var b=$APP.z(a);a=$APP.B(a);return this.l(b,a)};
var Mya=new $APP.I(null,16,5,$APP.J,[$APP.Vq,F$,E$,G$,$APP.xG,$APP.Tn,$APP.oD,R$,$APP.lx,Yya,Wya,Xya,O$,H$,I$,K$],null),Y$=function Y$(a){for(var c=[],d=arguments.length,e=0;;)if(e<d)c.push(arguments[e]),e+=1;else break;return Y$.l(arguments[0],arguments[1],2<c.length?new $APP.Bd(c.slice(2),0,null):null)};
Y$.l=function(a,b,c){c=$APP.$g.h($APP.qp,c);c=$APP.Fg(c);var d=$APP.Ne.h(c,D$),e=$APP.Ne.h(c,P$),f=$APP.Ne.h(c,Q$);c=$APP.Ne.h(c,jza);b=Rya(b);var g=$ya(b);a=Kya(g,a,$APP.E([D$,d]));d=$APP.D.j(a,0,null);a=$APP.D.j(a,1,null);f=Zya(b,d,$APP.E([P$,e,Q$,f]));e=$APP.D.j(f,0,null);f=$APP.D.j(f,1,null);c=$APP.n(c)?c:V$;c=c.g?c.g(b):c.call(null,b);return new $APP.k(null,4,[qza,e,eza,a,$APP.rH,c,lza,$APP.x(f)?f:null],null)};Y$.o=2;
Y$.A=function(a){var b=$APP.z(a),c=$APP.B(a);a=$APP.z(c);c=$APP.B(c);return this.l(b,a,c)};var Z$=$APP.Dw($APP.fN),rza=new $APP.k(null,5,[bza,function(){var a=new $APP.yd(function(){return U$},hza,$APP.Ti([$APP.lK,$APP.T,$APP.P,$APP.Qm,$APP.WA,$APP.Vn,$APP.Rm,$APP.XA,$APP.X,$APP.Z,$APP.YA],["0.3.0",$APP.fN,bza,"clojure/tools/cli.cljc",37,1,515,515,$APP.K(new $APP.I(null,2,5,$APP.J,[aza,cza],null)),"Format a sequence of summary parts into columns. lens is a sequence of\n  lengths to use for parts. There are two sequences of lengths if we are\n  not displaying defaults. There are three sequences of lengths if we\n  are showing defaults.",
$APP.n(U$)?U$.I:null])),b=$APP.t(a);a=$APP.se(a);var c=$APP.n(null)?null:$APP.P.g(a),d=new $APP.k(null,4,[$APP.T,Z$,$APP.P,c,$APP.X,$APP.X.g(a),$APP.Z,$APP.Z.g(a)],null);return $APP.n($APP.mr.g(a))?$APP.xw(c,b,d):$APP.n($APP.Pq.g(a))?$APP.yw(c,b,d):$APP.ww(c,b,d)}(),oza,function(){var a=new $APP.yd(function(){return V$},mza,$APP.Ti([$APP.lK,$APP.T,$APP.P,$APP.Qm,$APP.WA,$APP.Vn,$APP.Rm,$APP.XA,$APP.X,$APP.Z,$APP.YA],["0.3.0",$APP.fN,oza,"clojure/tools/cli.cljc",34,1,532,532,$APP.K(new $APP.I(null,
1,5,$APP.J,[$APP.Yfa],null)),"Reduce options specs into a options summary for printing at a terminal.\n  Note that the specs argument should be the compiled version. That effectively\n  means that you shouldn't call summarize directly. When you call parse-opts\n  you get back a :summary key which is the result of calling summarize (or\n  your user-supplied :summary-fn option) on the compiled option specs.",$APP.n(V$)?V$.I:null])),b=$APP.t(a);a=$APP.se(a);var c=$APP.n(null)?null:$APP.P.g(a),d=new $APP.k(null,
4,[$APP.T,Z$,$APP.P,c,$APP.X,$APP.X.g(a),$APP.Z,$APP.Z.g(a)],null);return $APP.n($APP.mr.g(a))?$APP.xw(c,b,d):$APP.n($APP.Pq.g(a))?$APP.yw(c,b,d):$APP.ww(c,b,d)}(),nza,function(){var a=new $APP.yd(function(){return W$},gza,$APP.Ti([$APP.lK,$APP.T,$APP.P,$APP.Qm,$APP.WA,$APP.Vn,$APP.Rm,$APP.XA,$APP.X,$APP.Z,$APP.YA],["0.3.2",$APP.fN,nza,"clojure/tools/cli.cljc",44,1,549,549,$APP.K(new $APP.I(null,1,5,$APP.J,[X$],null)),"Extract the map of default options from a sequence of option vectors.\n\n  As of 0.4.1, this also applies any :default-fn present.",
$APP.n(W$)?W$.I:null])),b=$APP.t(a);a=$APP.se(a);var c=$APP.n(null)?null:$APP.P.g(a),d=new $APP.k(null,4,[$APP.T,Z$,$APP.P,c,$APP.X,$APP.X.g(a),$APP.Z,$APP.Z.g(a)],null);return $APP.n($APP.mr.g(a))?$APP.xw(c,b,d):$APP.n($APP.Pq.g(a))?$APP.yw(c,b,d):$APP.ww(c,b,d)}(),dza,function(){var a=new $APP.yd(function(){return Y$},pza,$APP.Ti([$APP.lK,$APP.T,$APP.P,$APP.Qm,$APP.WA,$APP.$G,$APP.Vn,$APP.Rm,$APP.XA,$APP.X,$APP.Z,$APP.YA],["0.3.0",$APP.fN,dza,"clojure/tools/cli.cljc",35,new $APP.k(null,6,[$APP.GQ,
!0,$APP.Gs,2,$APP.OF,2,$APP.fG,new $APP.I(null,1,5,$APP.J,[$APP.K($APP.YC,X$,$APP.UF)],null),$APP.X,$APP.K(new $APP.I(null,4,5,$APP.J,[$APP.YC,X$,$APP.fl,$APP.UF],null)),$APP.wJ,$APP.K(null)],null),1,564,564,$APP.K(new $APP.I(null,4,5,$APP.J,[$APP.YC,X$,$APP.fl,$APP.UF],null)),'Parse arguments sequence according to given option specifications and the\n  GNU Program Argument Syntax Conventions:\n\n    https://www.gnu.org/software/libc/manual/html_node/Argument-Syntax.html\n\n  Option specifications are a sequence of vectors with the following format:\n\n    [short-opt long-opt-with-required-description description\n     :property value]\n\n  The first three string parameters in an option spec are positional and\n  optional, and may be nil in order to specify a later parameter.\n\n  By default, options are toggles that default to nil, but the second string\n  parameter may be used to specify that an option requires an argument.\n\n    e.g. ["-p" "--port PORT"] specifies that --port requires an argument,\n         of which PORT is a short description.\n\n  The :property value pairs are optional and take precedence over the\n  positional string arguments. The valid properties are:\n\n    :id           The key for this option in the resulting option map. This\n                  is normally set to the keywordized name of the long option\n                  without the leading dashes.\n\n                  Multiple option entries can share the same :id in order to\n                  transform a value in different ways, but only one of these\n                  option entries may contain a :default(-fn) entry.\n\n                  This option is mandatory.\n\n    :short-opt    The short format for this option, normally set by the first\n                  positional string parameter: e.g. "-p". Must be unique.\n\n    :long-opt     The long format for this option, normally set by the second\n                  positional string parameter; e.g. "--port". Must be unique.\n\n    :required     A description of the required argument for this option if\n                  one is required; normally set in the second positional\n                  string parameter after the long option: "--port PORT".\n\n                  The absence of this entry indicates that the option is a\n                  boolean toggle that is set to true when specified on the\n                  command line.\n\n    :desc         A optional short description of this option.\n\n    :default      The default value of this option. If none is specified, the\n                  resulting option map will not contain an entry for this\n                  option unless set on the command line. Also see :default-fn\n                  (below).\n\n                  This default is applied before any arguments are parsed so\n                  this is a good way to seed values for :assoc-fn or :update-fn\n                  as well as the simplest way to provide defaults.\n\n                  If you need to compute a default based on other command line\n                  arguments, or you need to provide a default separate from the\n                  seed for :assoc-fn or :update-fn, see :default-fn below.\n\n    :default-desc An optional description of the default value. This should be\n                  used when the string representation of the default value is\n                  too ugly to be printed on the command line, or :default-fn\n                  is used to compute the default.\n\n    :default-fn   A function to compute the default value of this option, given\n                  the whole, parsed option map as its one argument. If no\n                  function is specified, the resulting option map will not\n                  contain an entry for this option unless set on the command\n                  line. Also see :default (above).\n\n                  If both :default and :default-fn are provided, if the\n                  argument is not provided on the command-line, :default-fn will\n                  still be called (and can override :default).\n\n    :parse-fn     A function that receives the required option argument and\n                  returns the option value.\n\n                  If this is a boolean option, parse-fn will receive the value\n                  true. This may be used to invert the logic of this option:\n\n                  ["-q" "--quiet"\n                   :id :verbose\n                   :default true\n                   :parse-fn not]\n\n    :assoc-fn     A function that receives the current option map, the current\n                  option :id, and the current parsed option value, and returns\n                  a new option map. The default is \'assoc\'.\n\n                  For non-idempotent options, where you need to compute a option\n                  value based on the current value and a new value from the\n                  command line. If you only need the the current value, consider\n                  :update-fn (below).\n\n                  You cannot specify both :assoc-fn and :update-fn for an\n                  option.\n\n    :update-fn    Without :multi true:\n\n                  A function that receives just the existing parsed option value,\n                  and returns a new option value, for each option :id present.\n                  The default is \'identity\'.\n\n                  This may be used to create non-idempotent options where you\n                  only need the current value, like setting a verbosity level by\n                  specifying an option multiple times. ("-vvv" -\x3e 3)\n\n                  ["-v" "--verbose"\n                   :default 0\n                   :update-fn inc]\n\n                  :default is applied first. If you wish to omit the :default\n                  option value, use fnil in your :update-fn as follows:\n\n                  ["-v" "--verbose"\n                   :update-fn (fnil inc 0)]\n\n                  With :multi true:\n\n                  A function that receives both the existing parsed option value,\n                  and the parsed option value from each instance of the option,\n                  and returns a new option value, for each option :id present.\n                  The :multi option is ignored if you do not specify :update-fn.\n\n                  For non-idempotent options, where you need to compute a option\n                  value based on the current value and a new value from the\n                  command line. This can sometimes be easier than use :assoc-fn.\n\n                  ["-f" "--file NAME"\n                   :default []\n                   :update-fn conj\n                   :multi true]\n\n                  :default is applied first. If you wish to omit the :default\n                  option value, use fnil in your :update-fn as follows:\n\n                  ["-f" "--file NAME"\n                   :update-fn (fnil conj [])\n                   :multi true]\n\n                  Regardless of :multi, you cannot specify both :assoc-fn\n                  and :update-fn for an option.\n\n    :validate     A vector of [validate-fn validate-msg ...]. Multiple pairs\n                  of validation functions and error messages may be provided.\n\n    :validate-fn  A vector of functions that receives the parsed option value\n                  and returns a falsy value or throws an exception when the\n                  value is invalid. The validations are tried in the given\n                  order.\n\n    :validate-msg A vector of error messages corresponding to :validate-fn\n                  that will be added to the :errors vector on validation\n                  failure. Can be plain strings, or functions to be applied\n                  to the (invalid) option argument to produce a string.\n\n  parse-opts returns a map with four entries:\n\n    {:options     The options map, keyed by :id, mapped to the parsed value\n     :arguments   A vector of unprocessed arguments\n     :summary     A string containing a minimal options summary\n     :errors      A possible vector of error message strings generated during\n                  parsing; nil when no errors exist}\n\n  A few function options may be specified to influence the behavior of\n  parse-opts:\n\n    :in-order     Stop option processing at the first unknown argument. Useful\n                  for building programs with subcommands that have their own\n                  option specs.\n\n    :no-defaults  Only include option values specified in arguments and do not\n                  include any default values in the resulting options map.\n                  Useful for parsing options from multiple sources; i.e. from a\n                  config file and from the command line.\n\n    :strict       Parse required arguments strictly: if a required argument value\n                  matches any other option, it is considered to be missing (and\n                  you have a parse error).\n\n    :summary-fn   A function that receives the sequence of compiled option specs\n                  (documented at #\'clojure.tools.cli/compile-option-specs), and\n                  returns a custom option summary string.\n  ',
$APP.n(Y$)?Y$.I:null])),b=$APP.t(a);a=$APP.se(a);var c=$APP.n(null)?null:$APP.P.g(a),d=new $APP.k(null,4,[$APP.T,Z$,$APP.P,c,$APP.X,$APP.X.g(a),$APP.Z,$APP.Z.g(a)],null);return $APP.n($APP.mr.g(a))?$APP.xw(c,b,d):$APP.n($APP.Pq.g(a))?$APP.yw(c,b,d):$APP.ww(c,b,d)}(),kza,function(){var a=new $APP.yd(function(){return S$},iza,$APP.Ti([$APP.lK,$APP.T,$APP.P,$APP.Qm,$APP.WA,$APP.Vn,$APP.Rm,$APP.XA,$APP.X,$APP.Z,$APP.YA],["0.3.0",$APP.fN,kza,"clojure/tools/cli.cljc",42,1,491,491,$APP.K(new $APP.I(null,
2,5,$APP.J,[fza,$APP.PL],null)),"Given a single compiled option spec, turn it into a formatted string,\n  optionally with its default values if requested.",$APP.n(S$)?S$.I:null])),b=$APP.t(a);a=$APP.se(a);var c=$APP.n(null)?null:$APP.P.g(a),d=new $APP.k(null,4,[$APP.T,Z$,$APP.P,c,$APP.X,$APP.X.g(a),$APP.Z,$APP.Z.g(a)],null);return $APP.n($APP.mr.g(a))?$APP.xw(c,b,d):$APP.n($APP.Pq.g(a))?$APP.yw(c,b,d):$APP.ww(c,b,d)}()],null);try{$APP.sx(new $APP.k(null,1,[$APP.$q,new $APP.k(null,1,[$APP.fN,rza],null)],null))}catch(a){throw console.error("An error occurred when calling (nbb.impl.tools-cli/init)"),a;};
export { $APP, shadow$provide, $jscomp };
